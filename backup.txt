
    /**
     * Creates an instance of <code>Item.class</code>,
     * with some object-fields not assigned yet.
     *
     * @param itemNumber     a unique identifier for the item. Cannot be null.
     * @param itemBrand      the brand which the item belongs to. Cannot be null.
     * @param itemPrice      sales price for the item. Cannot be negative.
     * @param itemAmount     number of the item in storage. Cannot be negative.
     * @param itemCategory   a category. Int must be in range 1 to 4.
     */
    public Item(
        final String itemNumber, final String itemBrand,
        final int itemPrice, final int itemAmount, final int itemCategory
    ) 
    {
        setItemNumber(itemNumber);
        setItemBrand(itemBrand);
        setItemPrice(itemPrice);
        setItemAmount(itemAmount);
        setItemCategory(itemCategory);
    }



public class Warehouse {
    

    private LinkedHashMap<String, Item> itemsByNumber;
    private LinkedHashMap<String, Item> itemsByDescription;

    public Warehouse() {
        this.itemsByNumber = new LinkedHashMap<>();
        this.itemsByDescription = new LinkedHashMap<>();
    }    

    public LinkedHashMap<String, Item> getItems() {
        return this.itemsByNumber;
    }

    public Item searchByNumberOrDescription(String searchWord) { 
        Item foundItem = null;

        if (this.itemsByNumber.containsKey(searchWord)) {
            foundItem = this.itemsByNumber.get(searchWord);
        } else if (this.itemsByDescription.containsKey(searchWord)) {
            foundItem = this.itemsByDescription.get(searchWord);
        } 
        return foundItem;
    }


    public Item searchByNumberAndDescription(String number, String description) {
        Item item1 = this.itemsByNumber.get(number);
        Item item2 = this.itemsByDescription.get(description);

        return ( item1.equals(item2) ? item1 : null);
    }

    public void addItem( 
        final String itemNumber, final String itemBrand,
        final String itemColor,  final String itemDescription,
        final double itemWeight, final double itemLength,
        final double itemHeight, final int itemPrice,
        final int    itemAmount, final int itemCategory
    ) {
        Item item = new Item(
            itemNumber, itemBrand,
            itemColor, itemDescription,
            itemWeight, itemLength,
            itemHeight, itemPrice,
            itemAmount, itemCategory
        );

        itemsByNumber.put(itemNumber, item);
        itemsByDescription.put(itemDescription, item);
    }
}








        System.out.print("\nItem number: ");
        String number = scanner.next().trim();
        System.out.print("\nItem brand: ");
        String brand = scanner.next().trim();
        System.out.print("\nItem color: ");
        String color = scanner.nextLine().trim();
        System.out.print("\nShort description: ");
        String description = scanner.next().trim();
        System.out.print("\nWeight in kilograms (double): ");
        double weight = scanner.nextDouble();
        System.out.print("\nLength in meters (double): ");
        double length = scanner.nextDouble();
        System.out.print("\nHeight in meters (double): ");
        double height = scanner.nextDouble();
        System.out.print("\nPrice in NOK (int): ");
        int price = scanner.nextInt();
        System.out.print("\nAmount of items: ");
        int amount = scanner.nextInt();
        System.out.print("\nItem category: ");
        int category = scanner.nextInt();





        private static void addItem() {

        boolean valid = false;
        String number = "";
        String brand = "";
        String color = "";
        String description = "";
        double weight = 0.0;
        double length = 0.0;
        double height = 0.0;
        int price = 0;
        int amount = 0;
        int category = 0;
        
        while (!valid) {

            System.out.println("\nPlease enter all item properties on a single line separated by semicolons:");
            System.out.println("Such as:  ItemNumber;ItemBrand;color;Description;weight;length;height;price;amount;category");
            System.out.println("\nNew item:\n");

            String line = scanner.next().trim();
            String[] params = line.split(";");


            try {
                number = params[0].trim();
                brand = params[1].trim();
                color = params[2].trim();
                description = params[3].trim();
                weight = Double.parseDouble(params[4]);
                length = Double.parseDouble(params[5]);
                height = Double.parseDouble(params[6]);

                price = Integer.parseInt(params[7]);
                amount = Integer.parseInt(params[8]);
                category = Integer.parseInt(params[9]);

                valid = true;
            } catch (Exception e) {
                System.out.print("There was something wrong with the input ");
                System.out.println("please try again.");
            }
        }

        warehouse.addItem(
            number, brand, color, 
            description, weight, 
            length, height, price, 
            amount, category
        );

        System.out.println("\n\nNew item was created");
    }



/**
     * Mutate <code>currentItem.itemAmount</code> which  
     * indicates that the amount of products of the Item 
     * which are currently being accessed by the user is 
     * either reduced or increased.
     * 
     * <p>The current Item must not be null for this method
     * to perform its operations.
     * 
     * @param amount the new amount of products related
     *      to the current Item instance.
     */
    public void alterCurrentItemAmount(Item item, int amount) {
        if (item != null) {
            item.setItemAmount(amount);
        }
    }

    /**
     * Set a new price for the Item which are currently
     * being inspected.
     * 
     * <p>The new price must be a non-negative integer,
     * and the current Item must not be null.
     * 
     * @param price the new price for a product associated
     *      with this Item instance.
     */
    public void alterCurrentItemPrice(Item item, int price) {
        if (item != null) {
            item.setItemPrice(price);
        }
    }

    /**
     * Change the description of the Item which are currently
     * being inspected.
     * 
     * <p>The key which is identifying the Item by its description
     * in the LinkedHashMap will be changed when performing this
     * action. This ensures that it is possible to search for the
     * Item by the new description later on.
     * 
     * <p>The description must be a non-empty String, and the
     * current Item must not be null.
     * 
     * @param description the new description of the current Item.
     */
    public void alterCurrentItemDescription(Item item, String description) {
        if (item != null) {
            String previousDescription = item.getItemDescription();
            item.setItemDescription(description.toLowerCase());
            this.items.remove(previousDescription);
            this.items.put(description, item);
        }
    }

    /**
     * Add a discount to the current price of the Item instance
     * which are currently being accessed.
     * 
     * <p>Will convert a percentage represented by a positive
     * integer between 0 and 100 into a new price for the
     * current Item. The current Item cannot be null.
     * 
     * @param discount an integer representing a percentage which
     *      will symbolize the reduction of the Item's current
     *      price.
     */
    public void setDiscount(Item item, int discount) {
        if (item != null) {
            item.setItemPrice(item.getItemPrice() * (1 - (discount/100)));
        }
    }
